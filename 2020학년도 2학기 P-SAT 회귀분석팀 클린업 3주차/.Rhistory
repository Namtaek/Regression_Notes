plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(best_subset, scale = "r2")
plot(best_subset, scale = "adjr2")
plot(best_subset, scale = "Cp")
plot(best_subset, scale = "bic")
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(best_subset, scale = "r2")
plot(best_subset, scale = "adjr2")
plot(best_subset, scale = "Cp")
plot(best_subset, scale = "bic")
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
coef(best_subset, 5)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + VORP + G, data = train)
forward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(forward_selection)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
backward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(backward_selection)
coef(forward_selection, 5)
coef(best_subset, 5)
coef(backward_selection, 5)
install.packages("pls")
library(pls)
pcr.fit = pcr(Salary ~ ., data = train, scale = TRUE)
pcr_fit = pcr(Salary ~ ., data = train, scale = TRUE)
pcr_fit
pcr_fit %>% summary
set.seed(1234)
train_idx <- createDataPartition(data$AMT, p = .8, list = FALSE, times = 1)
train_tune = data[train_idx, ]
val = data[-train_idx, ]
train_idx <- caret::createDataPartition(data$AMT, p = .8, list = FALSE, times = 1)
train_idx <- caret::createDataPartition(train$Salary, p = .8, list = FALSE, times = 1)
train_tune = data[train_idx, ]
val = data[-train_idx, ]
pcr_fit = pcr(Salary ~ ., data = train_tune, scale = TRUE)
pcr_fit %>% summary
library(MLmetrics)
rmse_df = data.frame(rep(NA, 16), rep(NA, 16))
colnames(rmse_df) = c('PC', 'RMSE')
for (i in 1:dim(rmse_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_df[i, 1] = paste('PC', i)
}
rmse_df
rmse_pcr_df = data.frame(rep(NA, 16), rep(NA, 16))
colnames(rmse_pcr_df) = c('PC', 'RMSE')
rmse_pcr_df %>% head
for (i in 1:dim(rmse_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_pcr_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_pcr_df[i, 1] = paste('PC', i)
}
rmse_df
plot(1:16, rmse_pcr_df$RMSE)
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
pcr %>% help
help(pcr)
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 6)
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 9)
pcr_fit
pcr_fit %>% summary
library(glmnet)
install.packages("glmnet")
library(data.table)
library(tidyverse)
data = fread('2017-18_NBA_salary.csv')
data %>% dim
data %>% glimpse
data <- data[complete.cases(data), ] # 결측치 제거
data <- data[-c(223:224), ] #겹치는 선수 삭제
data$Player <- NULL
data$Tm <- NULL
data$NBA_Country <- NULL
data = data %>% select('Salary', 'NBA_DraftNumber', 'Age', 'MP', 'PER',
`TS%`, `DRB%`, VORP, G, OBPM, DBPM, BPM, OWS, DWS, WS, `AST%`, `STL%`)
# train test split 진행
train_idx <- caret::createDataPartition(data$Salary, p = .8, list = FALSE, times = 1)
train = data[train_idx, ]
test = data[-train_idx, ]
dim(train) # 387행 17열
dim(test) # 94행 17열
lm_fit = lm(Salary ~ ., data = train)
lm_fit %>% summary
library(ggcorrplot)
corr <- cor(train) # 상관계수 행렬
p_mat <- cor_pmat(train) # 상관계수 p-value 행렬
ggcorrplot(corr, hc.order = T, type = "lower",
outline.color = "white", ggtheme = ggplot2::theme_gray(),
colors = c("#6D9EC1", "white", "#E46726"), lab = T, p.mat = p_mat,
insig = "blank", lab_size = 2, tl.cex = 7)
car::vif(lm_fit)
library(leaps)
best_subset = regsubsets(Salary ~ ., data = train, nvmax = 13)
bs = best_subset %>% summary
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
coef(best_subset, 5)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + VORP + G, data = train)
forward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(forward_selection)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
coef(forward_selection, 5)
backward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(backward_selection)
coef(backward_selection, 5)
set.seed(1234)
train_idx <- caret::createDataPartition(train$Salary, p = .8, list = FALSE, times = 1)
train_tune = data[train_idx, ]
val = data[-train_idx, ]
library(pls)
library(MLmetrics)
pcr_fit = pcr(Salary ~ ., data = train_tune, scale = TRUE)
pcr_fit %>% summary
rmse_pcr_df = data.frame(rep(NA, 16), rep(NA, 16))
colnames(rmse_pcr_df) = c('PC', 'RMSE')
rmse_pcr_df %>% head
for (i in 1:dim(rmse_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_pcr_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_pcr_df[i, 1] = paste('PC', i)
}
rmse_df
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 9)
pcr_fit %>% summary
library(glmnet)
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
# if alpha=0 -> ridge; if alpha=1 -> lasso.
# Default: standardize = TRUE
lambda = c(10^seq(10,0,length=100),0))
lambda = c(10^seq(10,0,length=100),0)
train_x = train %>% select(-Salary)
train_y = train %>% select(Salary)
lambda = c(10^seq(10,0,length=100),0)
cv.glmnet(train_x, train_y, alpha = 0, lambda = lambda)
lambda = c(10^seq(10,0,length=100),0)
train_y = train %>% select(Salary) %>% as.vector
grid_lambda = c(10^seq(10,0,length=100),0)
cv.glmnet(train_x, train_y, alpha = 0, lambda = grid_lambda)
train_y = train %>% select(Salary) %>% unlist
cv.glmnet(train_x, train_y, alpha = 0, lambda = grid_lambda)
train_x %>% class
train_y %>% class
train_y
train_y = train %>% select(Salary) %>% unlist %>% as.vector
train_y %>% class
train_y
cv.glmnet(train_x, train_y, alpha = 0, lambda = grid_lambda)
cv.glmnet
?cv.glmnet
grid_lambda
train_x = train %>% select(-Salary) %>% as.matrix()
train_y = train %>% select(Salary) %>% unlist %>% as.vector
train_x %>% class
train_y %>% class
grid_lambda = c(10^seq(10,0,length=100),0)
cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5, )
cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit %>% summary
cv_ridge_fit
cv_ridge_fit %>% plot
grid_lambda
grid_lambda = c(10^seq(5,0,length=100),0)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
grid_lambda = c(10^seq(12, 0, length = 100), 0)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
?cv_ridge_fit
>cv_ridge_fit
?cv_ridge_fit
?cv.glmnet
cv_ridge_fit %>% coef
grid_lambda = seq(0, 10, 100)
grid_lambda
grid_lambda = seq(0, 10, by = 100)
grid_lambda
?seq
grid_lambda = seq(from = 0, to = 10, by = 100)
grid_lambda
seq(from = 0, to = 10, by = 100)
grid_lambda = seq(from = 0, to = 10, length.out =  = 100)
grid_lambda = seq(from = 0, to = 10, length.out = 100)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
cv_ridge_fit %>% coef
lm_fit %>% summary
train$Salary = train$Salary^0.22
test$Salary = test$Salary^0.22
lm_fit = lm(Salary ~ ., data = train)
lm_fit %>% summary
library(ggcorrplot)
corr <- cor(train) # 상관계수 행렬
p_mat <- cor_pmat(train) # 상관계수 p-value 행렬
ggcorrplot(corr, hc.order = T, type = "lower",
outline.color = "white", ggtheme = ggplot2::theme_gray(),
colors = c("#6D9EC1", "white", "#E46726"), lab = T, p.mat = p_mat,
insig = "blank", lab_size = 2, tl.cex = 7)
car::vif(lm_fit)
library(leaps)
best_subset = regsubsets(Salary ~ ., data = train, nvmax = 13)
bs = best_subset %>% summary
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
coef(best_subset, 5)
best_lm_fit = lm(Salary ~ NBA_DraftNumber + Age + MP + VORP + G, data = train)
forward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(forward_selection)
fs = summary(forward_selection)
plot(fs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(fs$bic)
points(l, fs$bic[l], col = "red", cex = 2, pch = 20)
coef(forward_selection, 5)
backward_selection = regsubsets(Salary ~ ., data = train, nvmax = 13, method = "forward")
summary(backward_selection)
coef(backward_selection, 5)
set.seed(1234)
train_idx <- caret::createDataPartition(train$Salary, p = .8, list = FALSE, times = 1)
train_tune = data[train_idx, ]
val = data[-train_idx, ]
library(pls)
library(MLmetrics)
pcr_fit = pcr(Salary ~ ., data = train_tune, scale = TRUE)
pcr_fit %>% summary
rmse_pcr_df = data.frame(rep(NA, 16), rep(NA, 16))
colnames(rmse_pcr_df) = c('PC', 'RMSE')
rmse_pcr_df %>% head
for (i in 1:dim(rmse_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_pcr_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_pcr_df[i, 1] = paste('PC', i)
}
rmse_df
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
rmse_pcr_df
pcr_fit = pcr(Salary ~ ., data = train_tune, scale = TRUE)
pcr_fit %>% summary
rmse_pcr_df = data.frame(rep(NA, 16), rep(NA, 16))
colnames(rmse_pcr_df) = c('PC', 'RMSE')
rmse_pcr_df %>% head
for (i in 1:dim(rmse_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_pcr_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_pcr_df[i, 1] = paste('PC', i)
}
for (i in 1:dim(rmse_pcr_df)[1]) {
pcr_fit = pcr(Salary ~ ., data = train_tune)
pred_y = predict(pcr_fit, val, ncomp = i)
rmse_pcr_df[i, 2] = RMSE(pred_y, val$Salary)
rmse_pcr_df[i, 1] = paste('PC', i)
}
rmse_pcr_df
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 9)
pcr_fit %>% summary
library(glmnet)
train_x = train %>% select(-Salary) %>% as.matrix()
train_y = train %>% select(Salary) %>% unlist %>% as.vector
grid_lambda = seq(from = 0, to = 10, length.out = 100)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
cv_ridge_fit %>% coef
grid_lambda = seq(from = 0, to = 5, length.out = 100)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
grid_lambda = seq(from = 0, to = 10, length.out = 200)
grid_lambda
cv_ridge_fit = cv.glmnet(x = train_x, y = train_y, alpha = 0, lambda = grid_lambda, nfolds = 5)
cv_ridge_fit
cv_ridge_fit %>% plot
cv_ridge_fit %>% coef
cv_ridge_fit$lambda
cv_ridge_fit$lambda.min
opt_ridge_lambda = cv_ridge_fit$lambda.min
ridge_fit = glmnet(x = train_x, y = train_y, alpha = 0, lambda = opt_ridge_lambda, nfolds = 5)
ridge_fit = glmnet(x = train_x, y = train_y, alpha = 0, lambda = opt_ridge_lambda)
ridge_fit %>% summary
ridge_fit %>% coef
grid_lambda = seq(from = 0, to = 10, length.out = 200)
grid_lambda
cv_lasso_fit = cv.glmnet(x = train_x, y = train_y, alpha = 1, lambda = grid_lambda, nfolds = 5)
opt_lasso_lambda = cv_lasso_fit$lambda.min
cv_lasso_fit %>% plot
cv_lasso_fit %>% coef
lasso_fit = glmnet(x = train_x, y = train_y, alpha = 1, lambda = opt_ridge_lambda)
lasso_fit %>% coef
predict(best_lm_fit, test)
pred_bs_y = predict(best_lm_fit, test)
pred_pcr_y = predict(pcr_fit, test)
pred_ridge_y = predict(ridge_fit, test)
pred_ridge_y = predict(ridge_fit, test %>% as.matrix)
test %>% class
test %>% matrix
?predict
pred_ridge_y = predict.glm(ridge_fit, test %>% as.matrix)
pred_ridge_y = predict.glmnet(ridge_fit, test %>% as.matrix)
pred_ridge_y = predict.glmnet(ridge_fit, test)
test_x = test %>% select(-Salary) %>% as.matrix()
test_y = test %>% select(Salary) %>% unlist() %>% as.vector()
pred_ridge_y = predict(ridge_fit, s = opt_ridge_lambda, newx = test_x)
pred_ridge_y = predict(laaso_fit, s = opt_lasso_lambda, newx = test_x)
pred_ridge_y = predict(lasso_fit, s = opt_lasso_lambda, newx = test_x)
opt_lasso_lambda = cv_lasso_fit$lambda.min ; opt_lasso_lambda
opt_ridge_lambda = cv_ridge_fit$lambda.min ; opt_ridge_lambda
pred_bs_y = predict(best_lm_fit, test)
pred_pcr_y = predict(pcr_fit, test)
pred_ridge_y = predict(ridge_fit, s = opt_ridge_lambda, newx = test_x)
pred_ridge_y = predict(lasso_fit, s = opt_lasso_lambda, newx = test_x)
library(MLmetrics)
RMSE(pred_bs_y, test_y)
RMSE(pred_pcr_y, test_y)
RMSE(pred_ridge_y, test_y)
RMSE(pred_lasso_y, test_y)
pred_bs_y = predict(best_lm_fit, test)
pred_pcr_y = predict(pcr_fit, test)
pred_ridge_y = predict(ridge_fit, s = opt_ridge_lambda, newx = test_x)
pred_lasso_y = predict(lasso_fit, s = opt_lasso_lambda, newx = test_x)
RMSE(pred_bs_y, test_y)
RMSE(pred_pcr_y, test_y)
RMSE(pred_ridge_y, test_y)
RMSE(pred_lasso_y, test_y)
coef(best_subset, 5)
par(mfrow = c(2, 2))
plot(bs$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(bs$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
l = which.max(bs$adjr2)
points(l, bs$adjr2[l], col = "red", cex = 2, pch = 20)
plot(bs$cp, xlab = "Number of Variables", ylab = "Cp", type = 'l')
l = which.min(bs$cp)
points(l, bs$cp[l], col = "red", cex = 2, pch = 20)
plot(bs$bic, xlab = "Number of Variables", ylab = "BIC", type = 'l')
l = which.min(bs$bic)
points(l, bs$bic[l], col = "red", cex = 2, pch = 20)
par(mfrow = c(1, 1))
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 9)
pcr_fit %>% summary
plot(1:16, rmse_pcr_df$RMSE, type = 'b')
l = which.min(rmse_pcr_df$RMSE)
points(l, rmse_pcr_df$RMSE[l], col = "red", cex = 2, pch = 20)
pcr_fit = pcr(Salary ~ ., data = train, ncomp = 10)
pcr_fit %>% summary
library(data.table)
library(tidyverse)
data = fread('2017-18_NBA_salary.csv')
data %>% dim
data %>% glimpse
data <- data[complete.cases(data), ] # 결측치 제거
data <- data[-c(223:224), ] #겹치는 선수 삭제
data$Player <- NULL
data$Tm <- NULL
data$NBA_Country <- NULL
data = data %>% select('Salary', 'NBA_DraftNumber', 'Age', 'MP', 'PER',
`TS%`, `DRB%`, VORP, G, OBPM, DBPM, BPM, OWS, DWS, WS, `AST%`, `STL%`)
write.csv('2017-18_NBA_salary2.csv')
write.csv(data, '2017-18_NBA_salary2.csv')
write.csv(data, '2017-18_NBA_salary2.csv', row.names = F)
data$Salary = data$Salary^22
write.csv(data, '2017-18_NBA_salary2.csv', row.names = F)
data$Salary = data$Salary^22
write.csv(data, '2017-18_NBA_salary2.csv', row.names = F)
library(tidyverse)
data = fread('2017-18_NBA_salary.csv')
data %>% dim
data$Salary = data$Salary^0.22
write.csv(data, '2017-18_NBA_salary2.csv', row.names = F)
library(data.table)
library(tidyverse)
data = fread('2017-18_NBA_salary.csv')
data %>% dim
data %>% glimpse
data <- data[complete.cases(data), ] # 결측치 제거
data <- data[-c(223:224), ] #겹치는 선수 삭제
data$Player <- NULL
data$Tm <- NULL
data$NBA_Country <- NULL
data = data %>% select('Salary', 'NBA_DraftNumber', 'Age', 'MP', 'PER',
`TS%`, `DRB%`, VORP, G, OBPM, DBPM, BPM, OWS, DWS, WS, `AST%`, `STL%`)
data$Salary = data$Salary^0.22
write.csv(data, '2017-18_NBA_salary2.csv', row.names = F)
